{"version":3,"sources":["Components/Square.jsx","Components/Board.jsx","Components/Game.jsx","helpers.jsx","App.js","serviceWorker.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","styles","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","winner","lines","length","a","b","c","checkWinner","boardcpy","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kNAEMA,EAAQ,CACVC,WAAY,YACZC,OAAQ,qBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QAWEC,EAPA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACX,4BAAQT,MAAOA,EAAOS,QAASA,GACzBD,ICXJR,EAAQ,CACVE,OAAQ,qBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAaHC,EAVD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASR,EAAZ,EAAYA,QAAZ,OAGN,yBAAKT,MAAOA,GACPiB,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACT,kBAAC,EAAD,CAAQC,IAAKD,EAAGZ,MAAOW,EAAQV,QAAS,kBAAMA,EAAQW,WCdtE,IAAME,EAAS,CACXX,MAAO,QACPE,OAAQ,aA4CGU,EAvCF,WAAO,IAAD,EAEWC,mBAASC,MAAM,GAAGC,KAAK,OAFlC,mBAERC,EAFQ,KAEDC,EAFC,OAGeJ,oBAAS,GAHxB,mBAGRK,EAHQ,KAGCC,EAHD,KAITC,ECfH,SAAqBd,GAYxB,IAXA,IAAMe,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFZ,EAAI,EAAGA,EAAIY,EAAMC,OAASb,IAAK,CAAC,IAAD,cAClBY,EAAMZ,GADY,GAC7Bc,EAD6B,KAC1BC,EAD0B,KACvBC,EADuB,KAEpC,GAAInB,EAAQiB,IAAMjB,EAAQiB,KAAOjB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,GAAI,OAAOnB,EAAQiB,GAG7F,OAAO,KDFQG,CAAYV,GAsB3B,OACI,6BACI,kBAAC,EAAD,CAAOV,QAASU,EAAOlB,QArBX,SAAAW,GAChB,IAAMkB,EAAQ,YAAOX,GAErBY,QAAQC,IAAIpB,EAAI,iBAEZW,GAAUO,EAASlB,KAEvBkB,EAASlB,GAAKS,EAAU,IAAM,IAE9BD,EAASU,GACTR,GAAYD,OAYR,yBAAK7B,MAAOsB,GACR,2BAAIS,EAAS,eAAiBA,EAAS,uBAAyBF,EAAU,IAAM,MATtF,4BAAQpB,QAAW,kBAAMmB,EAASH,MAAM,GAAGC,KAAK,SAAhD,qBExBKe,G,MAHH,kBAAM,kBAAC,EAAD,QCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.85eed5a9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst style = {\r\n    background: 'lightblue',\r\n    border: '2px solid darkblue',\r\n    fontSize: '30px',\r\n    fontWeight: '800',\r\n    cursor: 'pointer',\r\n    outline: 'none'\r\n}\r\n\r\n\r\nconst Square = ({ value, onClick }) => (\r\n    <button style={style} onClick={onClick}>\r\n        { value }\r\n    </button>\r\n)\r\n\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst style = {\r\n    border: '4px solid darkblue',\r\n    borderRadius: '10px',\r\n    width: '250px',\r\n    height: '250px',\r\n    margin: '0 auto',\r\n    display: 'grid',\r\n    gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'\r\n};\r\n\r\nconst Board = ({ squares, onClick }) =>\r\n\r\n    (\r\n        <div style={style}>\r\n            {squares.map((square, i) => (\r\n                <Square key={i} value={square} onClick={() => onClick(i)} />\r\n            ))}\r\n        </div>\r\n    )\r\n\r\nexport default Board;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport Board from './Board';\r\nimport { checkWinner } from '../helpers';\r\n\r\nconst styles = {\r\n    width: '200px',\r\n    margin: '20px auto',\r\n\r\n\r\n}\r\n\r\nconst Game = () => {\r\n\r\n    const [board, setBoard] = useState(Array(9).fill(null))\r\n    const [xIsNext, setXisNext] = useState(true)\r\n    const winner = checkWinner(board)\r\n\r\n\r\n    const handleClick = i => {\r\n        const boardcpy = [...board]\r\n\r\n        console.log(i + \" is clicked\\n\")\r\n\r\n        if (winner || boardcpy[i]) return\r\n        \r\n        boardcpy[i] = xIsNext ? 'X' : 'O'\r\n\r\n        setBoard(boardcpy)\r\n        setXisNext(!xIsNext)\r\n    }\r\n\r\n    const renderMoves = () => \r\n        ( <button onClick = {() => setBoard(Array(9).fill(null))}>\r\n            START THE GAME\r\n        </button> )\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <Board squares={board} onClick={handleClick} />\r\n            <div style={styles}>\r\n                <p>{winner ? 'Winner is : ' + winner : 'Next player turn : ' + (xIsNext ? 'X' : 'O')}</p>\r\n                {renderMoves()}\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default Game;","export function checkWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length ; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) return squares[a];\r\n    }\r\n\r\n    return null;\r\n}","import React from 'react'\nimport Game from './Components/Game'\n\nimport './App.css'\n\nconst App = () => <Game />;\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}